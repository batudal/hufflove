/// @title  Staking
/// @notice SPDX-License-Identifier: MIT
/// @author takez0_o <https://github.com/takez0o>
/// @notice Published by Decoded Labs <https://decoded-labs.com>
/// @notice Modern and gas efficient implementation of StakingRewards algorithm
/// @notice Adapted from Synthetix (https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol)
/// @notice Inspired by HuffMate (https://github.com/pentagonxyz/huffmate)

// // Imports
#include "huffmate/auth/NonPayable.huff"
#include "huffmate/auth/Owned.huff"
#include "huffmate/data-structures/Hashmap.huff"
#include "huffmate/math/SafeMath.huff"
// #include "huffmate/tokens/ERC20.huff"
#include "huffmate/utils/Errors.huff"
#include "huffmate/utils/ERC20Transfer.huff"
#include "./ReentrancyGuard.huff"
#include "./TSOwnable.huff"

// Interface
#define function rewardsDuration() view returns(uint256)
#define function rewardsToken() view returns(address)
#define function stakingToken() view returns(address)
#define function totalSupply() view returns(uint256)
#define function balanceOf(address) view returns (uint256)
#define function lastTimeRewardApplicable() view returns (uint256)
#define function rewardPerToken() view returns (uint256)
#define function getRewardRate() view returns (uint256)
#define function notifyRewardAmount(uint256) nonpayable returns ()

// #define function earned(address) view returns (uint256)
// #define function getRewardForDuration() view returns (uint256)
// #define function stake(uint256) nonpayable returns () 
// #define function withdraw(uint256) nonpayable returns () 
// #define function getReward() nonpayable returns ()
// #define function exit() nonpayable returns () 
#define function recoverERC20(address,uint256) nonpayable returns ()
#define function setRewardsDuration(uint256) nonpayable returns ()

// // IERC20
#define function transfer(address,uint256) nonpayable returns ()
// #define function transferFrom(address,address,uint256) nonpayable returns ()

// // Events
#define event RewardAdded(uint256)
// #define event Staked(address indexed, uint256)
// #define event Withdrawn(address indexed, uint256)
// #define event RewardPaid(address indexed, uint256)
#define event RewardsDurationUpdated(uint256)
#define event Recovered(address, uint256)

// Storage
#define constant REWARDS_TOKEN_SLOT = FREE_STORAGE_POINTER()
#define constant STAKING_TOKEN_SLOT = FREE_STORAGE_POINTER()
#define constant PERIOD_FINISH_SLOT = FREE_STORAGE_POINTER()
#define constant REWARD_RATE_SLOT = FREE_STORAGE_POINTER()
#define constant REWARDS_DURATION_SLOT = FREE_STORAGE_POINTER()
#define constant LAST_UPDATE_TIME_SLOT = FREE_STORAGE_POINTER()
#define constant REWARD_PER_TOKEN_STORED_SLOT = FREE_STORAGE_POINTER()
#define constant USER_REWARD_PER_TOKEN_PAID_SLOT = FREE_STORAGE_POINTER()
#define constant REWARDS_SLOT = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_SLOT = FREE_STORAGE_POINTER()
#define constant BALANCES_SLOT = FREE_STORAGE_POINTER()

// Utility Constants
#define constant UINT_256_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
#define constant DECIMAL = 0xDE0B6B3A7640000
#define constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000000000000000000000000000

// Errors
#define constant AMOUNT_ZERO_ERROR = 0x5A45524F20414D4F554E54000000000000000000000000000000000000000000
#define constant AMOUNT_ZERO_LENGTH = 0x16
#define constant TRANSFER_ERROR = 0x5452414E53464552204641494C45440000000000000000000000000000000000
#define constant TRANSFER_LENGTH = 0x1e
#define constant GET_REWARD_ERROR = 0x4E4F205245574152445300000000000000000000000000000000000000000000
#define constant GET_REWARD_LENGTH = 0x14
#define constant PERIOD_ERROR = 0x504552494F44204E4F54204F5645520000000000000000000000000000000000
#define constant PERIOD_LENGTH = 0x1e
#define constant SET_REWARD_ERROR = 0x4E4F2042414C414E434500000000000000000000000000000000000000000000
#define constant SET_REWARD_LENGTH = 0x1a
#define constant STAKING_TOKEN_ERROR = 0x57524F4E4720544F4B454E000000000000000000000000000000000000000000
#define constant STAKING_TOKEN_LENGTH = 0x16

/// @notice Constructor
/// @notice Sets the initial addresses
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x60                            // [size] - byte size to copy
    0x60 codesize sub               // [offset, size] - offset in the code to copy from
    0x00                            // [mem, offset, size] - offset in memory to copy to
    codecopy                        // []

    0x00 mload                      // [rewardsToken]
    [REWARDS_TOKEN_SLOT] sstore     // []
    0x20 mload                      // [stakingToken]
    [STAKING_TOKEN_SLOT] sstore     // []
    0x40 mload                      // [pendingOwner]
    TSOWNABLE_CONSTRUCTOR()         // []
    UNLOCK()                        // []
}

/// ------------------------------------------------------------- /
///                        VIEW FUNCTIONS                         /
/// ------------------------------------------------------------- /

#define macro REWARDS_DURATION() = takes (0) returns (1) {
    NON_PAYABLE()                   // []
    [REWARDS_DURATION_SLOT] sload   // [rewardsDuration]
    0x00 mstore                     // []
    0x20 0x00 return                // []    
}

/// @notice Rewards Token
/// @notice Returns the address of the rewards token
#define macro REWARDS_TOKEN() = takes (0) returns (1) {
    NON_PAYABLE()                   // []
    [REWARDS_TOKEN_SLOT] sload      // [rewardsToken]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

/// @notice Staking Token
/// @notice Returns the address of the staking token
#define macro STAKING_TOKEN() = takes (0) returns (1) {
    NON_PAYABLE()                   // []
    [STAKING_TOKEN_SLOT] sload      // [stakingToken]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

/// @notice Total Supply
/// @notice Returns the total token supply of the contract
#define macro TOTAL_SUPPLY() = takes (0) returns (1) {
    NON_PAYABLE()                       // []
    [TOTAL_SUPPLY_SLOT] sload           // [supply]
    0x00 mstore                         // []
    0x20 0x00 return                    // []
}

/// @notice Balance Of
/// @notice Returns the balance of the given address
#define macro BALANCE_OF() = takes (0) returns (1) {
    NON_PAYABLE()                                       // []
    0x04 calldataload                                   // [account]
    [BALANCES_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)        // [balance]
    0x00 mstore                                         // []
    0x20 0x00 return                                    // []
}

/// @notice Last Time Reward Applicable
/// @notice Returns the last time reward was applicable
#define macro LAST_TIME_REWARD_APPLICABLE() = takes (0) returns (0) {
    LAST_TIME_REWARD_APPLICABLE_INNER()     // [lastTimeRewardApplicable]
    0x00 mstore                             // []
    0x20 0x00 return                        // []
}

#define macro LAST_TIME_REWARD_APPLICABLE_INNER() = takes (0) returns (1) {
    timestamp                       // [now]
    [PERIOD_FINISH_SLOT] sload      // [periodFinish, now]
    dup2 dup2                       // [periodFinish, now, periodFinish, now]
    lt                              // [periodFinish < now, periodFinish, now]

    periodFinishedJump jumpi        // [periodFinish, now]
    pop                             // [now]
    endJump jump

    periodFinishedJump:             // [periodFinish, now]
    swap1 pop                       // [periodFinish]
    
    endJump:
}


/// @notice Reward Per Token
/// @notice Returns the reward per token
#define macro REWARD_PER_TOKEN() = takes (0) returns (0) {
    NON_PAYABLE()                                   // []
    REWARD_PER_TOKEN_INNER()                        // [rewardPerToken]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

#define macro REWARD_PER_TOKEN_INNER() = takes (0) returns (1) {
    // input stack  []
    // output stack [rewardPerToken]
    [REWARD_PER_TOKEN_STORED_SLOT] sload            // [rewardPerTokenStored]
    [TOTAL_SUPPLY_SLOT] sload                       // [totalSupply, rewardPerTokenStored]
    dup1                                            // [totalSupply, totalSupply, rewardPerTokenStored]
    iszero                                          // [totalSupply == 0, totalSupply, rewardPerTokenStored]
    
    noSupplyJump jumpi                              // [totalSupply, rewardPerTokenStored]

    LAST_TIME_REWARD_APPLICABLE_INNER()             // [lastTimeRewardApplicable, totalSupply, rewardPerTokenStored]
    [LAST_UPDATE_TIME_SLOT] sload                   // [lastUpdateTime, lastTimeRewardApplicable, totalSupply, rewardPerTokenStored ]
    SAFE_SUB()                                      // [lastUpdateTime - lastTimeRewardApplicable, totalSupply, rewardPerTokenStored]
    [REWARD_RATE_SLOT] sload                        // [rewardRate, lastUpdateTime - lastTimeRewardApplicable, totalSupply, rewardPerTokenStored]
    SAFE_MUL()                                      // [rewardRate * (lastUpdateTime - lastTimeRewardApplicable), totalSupply, rewardPerTokenStored]
    [DECIMAL] sload SAFE_MUL()                      // [rewardRate * (lastUpdateTime - lastTimeRewardApplicable) * DECIMAL, totalSupply, rewardPerTokenStored]
    SAFE_DIV()                                      // [rewardRate * (lastUpdateTime - lastTimeRewardApplicable) * DECIMAL / totalSupply, rewardPerTokenStored]
    SAFE_ADD()                                      // [rewardPerTokenStored + rewardRate * (lastUpdateTime - lastTimeRewardApplicable) * DECIMAL / totalSupply]
    returnRPTJump jump

    noSupplyJump:                                   // [totalSupply, rewardPerToken]
    pop                                             // [rewardPerToken]
    returnRPTJump:                                  // [rewardPerToken]
}

#define macro GET_REWARD_RATE() = takes (0) returns (0) {
    NON_PAYABLE()                                   // []
    [REWARD_RATE_SLOT] sload                        // [rewardRate]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

// /// @notice Earned
// /// @notice Returns the amount of rewards earned by the given address
// /// @param account The address of the account
// #define macro EARNED() = takes (0) returns (0) {
//     0x04 calldataload                               // [account]
//     EARNED_INNER()                                  // [earned]
//     0x00 mstore                                     // []
//     0x20 0x00 return                                // []
// }

/// @notice Earned Inner
/// @notice Returns the amount of rewards earned by the given address
#define macro EARNED_INNER() = takes (1) returns (1) {
    // input stack: [account]
    // output stack: [earned]
    NON_PAYABLE()                                                   // [account]
    dup1                                                            // [account, account] 
    [USER_REWARD_PER_TOKEN_PAID_SLOT]                               // [USER_REWARD_PER_TOKEN_PAID_SLOT, account]
    LOAD_ELEMENT_FROM_KEYS(0x00)                                    // [userRewardPerTokenPaid, account]
    REWARD_PER_TOKEN_INNER()                                        // [rewardPerToken, userRewardPerTokenPaid, account]
    SAFE_SUB()                                                      // [rewardPerToken - userRewardPerTokenPaid, account]
    dup2                                                            // [account, rewardPerToken - userRewardPerTokenPaid, account]
    [BALANCES_SLOT]                                                 // [BALANCES_SLOT, account, rewardPerToken - userRewardPerTokenPaid, account]
    LOAD_ELEMENT_FROM_KEYS(0x00)                                    // [balance, rewardPerToken - userRewardPerTokenPaid, account]
    SAFE_MUL()                                                      // [balance * (rewardPerToken - userRewardPerTokenPaid), account]
    [DECIMAL] sload SAFE_MUL()                                      // [balance * (rewardPerToken - userRewardPerTokenPaid) * DECIMAL, account]
    dup2                                                            // [account, balance * (rewardPerToken - userRewardPerTokenPaid) * DECIMAL, account]
    [REWARDS_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)                     // [rewards, balance * (rewardPerToken - userRewardPerTokenPaid) * DECIMAL, account]
    SAFE_ADD()                                                      // [rewards + balance * (rewardPerToken - userRewardPerTokenPaid) * DECIMAL, account]
    swap1 pop                                                       // [rewards + balance * (rewardPerToken - userRewardPerTokenPaid) * DECIMAL]
}

/// @notice Get Reward For Duration
/// @notice Returns the reward for the given duration
#define macro GET_REWARD_FOR_DURATION() = takes (0) returns (0) {
    NON_PAYABLE()                                   // []
    [REWARD_RATE_SLOT] sload                        // [rewardRate]
    [REWARDS_DURATION_SLOT] sload                   // [duration, rewardRate]
    SAFE_MUL()                                      // [duration * rewardRate]
    0x00 mstore                                     // []
    0x20 0x00 return                                // []
}

/// ------------------------------------------------------------- /
///                      MUTATIVE FUNCTIONS                       /
/// ------------------------------------------------------------- /

// /// @notice Stake
// /// @notice Stakes the given amount of tokens
// /// @param amount The amount of tokens to stake
// #define macro STAKE() = takes (0) returns (0) {
//     WHEN_NOT_PAUSED()                               // []
//     LOCK()                                          // []
//     NON_PAYABLE()                                   // []
//     caller                                          // [caller]
//     UPDATE_REWARD_INNER()                           // []
//     0x04 calldataload                               // [amount]
//     dup1                                            // [amount, amount]
//     iszero                                          // [amount == 0, amount]

//     [AMOUNT_ZERO_LENGTH]                            // [AMOUNT_ZERO_LENGTH, amount == 0, amount]
//     [AMOUNT_ZERO_ERROR]                             // [AMOUNT_ZERO_ERROR, AMOUNT_ZERO_LENGTH, amount == 0, amount]
//     swap2                                           // [amount == 0, AMOUNT_ZERO_LENGTH, AMOUNT_ZERO_ERROR, amount]
//     REQUIRE()                                       // [amount]

//     [TOTAL_SUPPLY_SLOT]                             // [totalSupply, amount]
//     dup2                                            // [amount, totalSupply, amount]
//     SAFE_ADD()                                      // [amount + totalSupply, amount]
//     [TOTAL_SUPPLY_SLOT] sstore                      // [amount]

//     caller                                          // [caller, amount]
//     dup1                                            // [caller, caller, amount]
//     [BALANCES_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)    // [balance, caller, amount]
//     dup3                                            // [amount, balance, caller, amount]
//     SAFE_ADD()                                      // [amount + balance, caller, amount]
//     swap1                                           // [caller, amount + balance, amount]
//     [BALANCES_SLOT] STORE_ELEMENT_FROM_KEYS(0x00)   // [amount]

//     __FUNC_SIG(transferFrom)                        // [sig, amount]
//     0x00 mstore                                     // [amount]
//     caller 0x20 mstore                              // [amount]
//     address 0x40 mstore                             // [amount]
//     dup1                                            // [amount, amount]
//     0x60 mstore                                     // [amount]
//     0x00 0x00 0x64 0x1c 0x00                        // [value, argsOffset, argsSize, retOffset, retSize, amount]
//     [STAKING_TOKEN_SLOT]                            // [address, value, argsOffset, argsSize, retOffset, retSize, amount] 
//     gas                                             // [gas, address, value, argsOffset, argsSize, retOffset, retSize, amount]
//     call                                            // [success, amount]

//     [TRANSFER_LENGTH]                               // [length, success, amount]
//     [TRANSFER_ERROR]                                // [error, length, success, amount]
//     swap2                                           // [success, length, error, amount]
//     REQUIRE()                                       // [amount]

//     caller                                          // [address, amount]
//     __EVENT_HASH(Staked)                            // [sig, address, amount]
//     dup1 0x00 mstore                                // [sig, address, amount]
//     0x20 0x00                                       // [0, 32, sig, address, amount]
//     log3                                            // []
// }


// /// @notice Withdraw
// /// @notice Withdraws the given amount of tokens
// /// @param amount The amount of tokens to withdraw
// #define macro WITHDRAW() = takes (0) returns (0) {
//     LOCK()                                          // []
//     0x04 calldataload                               // [amount]
//     WITHDRAW_INNER()                                // []
// }

// /// @notice Withdraw Inner
// /// @notice Withdraws the given amount of tokens
// #define macro WITHDRAW_INNER() = takes (1) returns (0) {
//     // input stack [amount]
//     NON_PAYABLE()                                   // [amount]
//     caller                                          // [caller,amount]
//     UPDATE_REWARD_INNER()                           // [amount]
//     dup1                                            // [amount, amount]
//     iszero                                          // [amount == 0, amount]
//     [AMOUNT_ZERO_LENGTH]                            // [AMOUNT_ZERO_LENGTH, amount == 0, amount]
//     [AMOUNT_ZERO_ERROR]                             // [AMOUNT_ZERO_ERROR, AMOUNT_ZERO_LENGTH, amount == 0, amount]
//     swap2                                           // [amount == 0, AMOUNT_ZERO_LENGTH, AMOUNT_ZERO_ERROR, amount]
//     REQUIRE()                                       // [amount]

//     caller                                          // [caller, amount]
//     dup1                                            // [caller, caller, amount]
//     [BALANCES_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)    // [balance, caller, amount]
//     dup3                                            // [amount, balance, caller, amount]
//     SAFE_SUB()                                      // [balance - amount, caller, amount]
//     swap1                                           // [caller, balance - amount, amount]
//     [BALANCES_SLOT] STORE_ELEMENT_FROM_KEYS(0x00)   // [amount]

//     [TOTAL_SUPPLY_SLOT]                             // [totalSupply, amount]
//     SAFE_SUB()                                      // [totalSupply - amount, amount]
//     [TOTAL_SUPPLY_SLOT] sstore                      // [amount]

//     __FUNC_SIG(transferFrom)                        // [sig, amount]
//     0x00 mstore                                     // [amount]
//     address 0x20 mstore                             // [amount]
//     caller 0x40 mstore                              // [amount]
//     dup1 0x60 mstore                                // [amount]
//     0x00 0x00 0x64 0x1c 0x00                        // [value, argsOffset, argsSize, retOffset, retSize, amount]
//     [STAKING_TOKEN_SLOT]                            // [address, value, argsOffset, argsSize, retOffset, retSize, amount] 
//     gas                                             // [gas, address, value, argsOffset, argsSize, retOffset, retSize, amount]
//     call                                            // [success, amount]

//     [TRANSFER_LENGTH]                               // [length, success, amount]
//     [TRANSFER_ERROR]                                // [error, length, success, amount]
//     swap2                                           // [success, length, error, amount]
//     REQUIRE()                                       // [amount]

//     caller                                          // [address, amount]
//     __EVENT_HASH(Withdrawn)                         // [sig, address, amount]
//     dup1 0x00 mstore                                // [sig, address, amount]
//     0x20 0x00                                       // [0, 32, sig, address, amount]
//     log3                                            // []
// }

// /// @notice Get Reward
// /// @notice Get the reward for the caller
// #define macro GET_REWARD() = takes (0) returns (0) {
//     NON_PAYABLE()                                   // []
//     LOCK()                                          // []
//     caller                                          // [caller]
//     dup1                                            // [caller, caller]
//     UPDATE_REWARD_INNER()                           // [caller]
//     [REWARDS_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)     // [reward]
    
//     iszero                                          // [reward == 0]
//     [GET_REWARD_LENGTH]                             // [length, reward == 0]
//     [GET_REWARD_ERROR]                              // [error, length, reward == 0]
//     swap2                                           // [reward == 0, length, error]
//     REQUIRE()                                       // []

//     0x00 caller                                     // [caller, 0x00, reward]
//     [REWARDS_SLOT] STORE_ELEMENT_FROM_KEYS(0x00)    // [reward]

//     __FUNC_SIG(transfer)                            // [sig, reward]
//     0x00 mstore                                     // [reward]
//     caller 0x20 mstore                              // [reward]
//     dup1 0x40 mstore                                // [reward]
//     0x00 0x00 0x44 0x1c 0x00                        // [value, argsOffset, argsSize, retOffset, retSize, reward]
//     [REWARDS_TOKEN_SLOT]                            // [address, value, argsOffset, argsSize, retOffset, retSize, reward] 
//     gas                                             // [gas, address, value, argsOffset, argsSize, retOffset, retSize, reward]
//     call                                            // [success, reward]
//     dup1                                            // [success, success, reward]

//     [TRANSFER_LENGTH]                               // [length, success, reward]
//     [TRANSFER_ERROR]                                // [error, length, success, reward]
//     swap2                                           // [success, length, error, reward]
//     REQUIRE()                                       // [reward]

//     caller                                          // [address, reward]
//     __EVENT_HASH(RewardPaid)                        // [sig, address, reward]
//     dup1 0x00 mstore                                // [sig, address, reward]
//     0x20 0x00                                       // [0, 32, sig, address, reward]
//     log3                                            // []
// }

// /// @notice Exit
// /// @notice Withdraws all tokens and rewards
// #define macro EXIT() = takes (0) returns (0) {
//     LOCK()                                          // []
//     caller                                          // [caller]
//     [BALANCES_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)    // [balance]
//     WITHDRAW_INNER()                                // []
//     GET_REWARD()                                    // []
// }

/// @notice Update Reward Modifier
/// @notice Updates user rewards
#define macro UPDATE_REWARD_MODIFIER() = takes (1) returns (0) {
    // input stack: [account]

    REWARD_PER_TOKEN_INNER()                                        // [rewardPerToken, account]
    [REWARD_PER_TOKEN_STORED_SLOT] sstore                           // [account]
    LAST_TIME_REWARD_APPLICABLE_INNER()                             // [lastTimeRewardApplicable, account]
    [LAST_UPDATE_TIME_SLOT] sstore                                  // [account]
    [ZERO_ADDRESS]                                                  // [zeroAddress, account]
    dup2 eq                                                         // [zeroAddress == account, account]

    zeroAddressJump jumpi                                           // [account]

    dup1 dup1                                                       // [account, account, account]
    EARNED_INNER()                                                  // [earned, account, account]
    dup2                                                            // [account, earned, account, account]
    [REWARDS_SLOT]                                                  // [REWARDS_SLOT, account, earned, account, account]
    STORE_ELEMENT_FROM_KEYS(0x00)                                   // [account, account]
    [REWARD_PER_TOKEN_STORED_SLOT]                                  // [rewardPerTokenStored, account]
    dup2                                                            // [account, rewardPerTokenStored, account]
    [USER_REWARD_PER_TOKEN_PAID_SLOT]                               // [userRewardPerTokenPaid, account, rewardPerTokenStored, account]
    STORE_ELEMENT_FROM_KEYS(0x00)                                   // [account]

    zeroAddressJump:                                                // [account]
    pop                                                             // []
}

/// ------------------------------------------------------------- /
///                       ADMIN FUNCTIONS                         /
/// ------------------------------------------------------------- /

/// @notice Set Rewards Duration
/// @notice Sets rewards duration
/// @param duration The duration to set
#define macro SET_REWARDS_DURATION() = takes (0) returns (0) {
    NON_PAYABLE()                           // []
    ONLY_OWNER_MODIFIER()                   // []

    [PERIOD_FINISH_SLOT] sload              // [periodFinish]
    timestamp                               // [timestamp, periodFinish]
    gt                                      // [timestamp > periodFinish]
    [PERIOD_LENGTH] sload                   // [PERIOD_LENGTH, condition]
    [PERIOD_ERROR] sload                    // [PERIOD_ERROR, PERIOD_LENGTH, condition]
    swap2                                   // [condition, PERIOD_LENGTH, PERIOD_ERROR]
    REQUIRE()                               // []

    0x04 calldataload                       // [duration]
    dup1                                    // [duration, duration]
    [REWARDS_DURATION_SLOT] sstore          // [duration]

    __EVENT_HASH(RewardsDurationUpdated)    // [sig, duration]
    dup1 0x00 mstore                        // [sig, duration]
    0x20 0x00                               // [0, 32, sig, duration]
    log2                                    // []

    0x01 0x00 mstore                        // []
    0x20 0x00 return                        // []
}

// TODO: Refactor to remove excess storage + calldata calls
/// @notice Notify Reward Amount
/// @notice Notifies reward amount
/// @notice Needs balance to be greater than notified amount
/// @param reward Reward amount
#define macro NOTIFY_REWARD_AMOUNT() = takes (0) returns (0) {
    NON_PAYABLE()                                   // []
    ONLY_OWNER_MODIFIER()                           // []
    0x00 UPDATE_REWARD_MODIFIER()                   // []

    [PERIOD_FINISH_SLOT] sload                      // [periodFinish]
    dup1                                            // [periodFinish, periodFinish]
    timestamp                                       // [timestamp, periodFinish, periodFinish]
    gt                                              // [timestamp > periodFinish, periodFinish]    

    periodFinishJump jumpi                          // [periodFinish]

    timestamp                                       // [timestamp, periodFinish]
    swap1                                           // [periodFinish, timestamp]
    SAFE_SUB()                                      // [periodFinish - timestamp]
    [REWARD_RATE_SLOT] sload                        // [rewardRate, periodFinish - timestamp]
    SAFE_MUL()                                      // [rewardRate * (periodFinish - timestamp)]
    0x04 calldataload                               // [reward, rewardRate * (periodFinish - timestamp)]
    add                                             // [reward + rewardRate * (periodFinish - timestamp)]
    [REWARDS_DURATION_SLOT] sload                   // [rewardsDuration, reward + rewardRate * (periodFinish - timestamp)]
    swap1                                           // [reward + rewardRate * (periodFinish - timestamp), rewardsDuration]
    SAFE_DIV()                                      // [reward + rewardRate * (periodFinish - timestamp) / rewardsDuration]
    dup1                                            // [setRewardRate, setRewardRate]
    [REWARD_RATE_SLOT] sstore                       // [setRewardRate]
    rewardRateJump jump                             // [setRewardRate]

    periodFinishJump:                               // [periodFinish]
    pop                                             // []
    [REWARDS_DURATION_SLOT] sload                   // [rewardsDuration]
    0x04 calldataload                               // [reward, rewardsDuration]
    SAFE_DIV()                                      // [setRewardRate]
    dup1                                            // [setRewardRate, setRewardRate]
    [REWARD_RATE_SLOT] sstore                       // [setRewardRate]

    rewardRateJump:                                 // [setRewardRate]
    [REWARDS_DURATION_SLOT] sload                   // [rewardsDuration, setRewardRate]
    __FUNC_SIG(balanceOf)                           // [sig, rewardsDuration, setRewardRate]
    0x00 mstore                                     // [rewardsDuration, setRewardRate]
    address                                         // [address, rewardsDuration, setRewardRate]
    0x20 mstore                                     // [rewardsDuration, setRewardRate]
    0x20 0x00 0x24 0x1c                             // [argsOffset, argsSize, retOffset, retSize, rewardsDuration, setRewardRate]
    [REWARDS_TOKEN_SLOT] sload                      // [rewardsToken, argsOffset, argsSize, retOffset, retSize, rewardsDuration, setRewardRate]
    gas                                             // [gas, rewardsToken, argsOffset, argsSize, retOffset, retSize, rewardsDuration, setRewardRate]
    staticcall                                      // [success, rewardsDuration, setRewardRate]
    pop                                             // [rewardsDuration, setRewardRate]
    COPY_RETURN_DATA(0x00,0x00)                     // [rewardsDuration, setRewardRate]
    0x00 mload                                      // [balance, rewardsDuration, setRewardRate]
    SAFE_DIV()                                      // [realRewardPerToken, setRewardRate]
    lt iszero                                       // [setRewardRate, realRewardPerToken]
    [SET_REWARD_LENGTH] sload                       // [SET_REWARD_LENGTH, condition]
    [SET_REWARD_ERROR] sload                        // [SET_REWARD_ERROR, SET_REWARD_LENGTH, condition]
    swap2                                           // [condition, SET_REWARD_LENGTH, SET_REWARD_ERROR]
    REQUIRE()                                       // []

    timestamp                                       // [timestamp]
    dup1                                            // [timestamp, timestamp]
    [LAST_UPDATE_TIME_SLOT] sstore                  // [timestamp]
    [REWARDS_DURATION_SLOT] sload                   // [rewardsDuration, timestamp]
    add                                             // [periodFinish]
    [PERIOD_FINISH_SLOT] sstore                     // []

    0x04 calldataload                               // [reward]
    __EVENT_HASH(RewardAdded)                       // [sig, reward]
    dup1 0x00 mstore                                // [sig, reward]
    0x20 0x00                                       // [0, 32, sig, reward]
    log2 

    0x01 0x00 mstore                                // []
    0x20 0x00 return                                // []
}

/// @notice Recover ERC-20
/// @notice Non-Payable function that transfers the given token in given amount to the owner.
/// @param token The address of the token to recover
/// @param amount The amount of the token to recover
#define macro RECOVER_ERC20() = takes (0) returns (0) {
    NON_PAYABLE()               // []
    ONLY_OWNER_MODIFIER()       // []
    
    0x04 calldataload           // [address]
    [STAKING_TOKEN_SLOT] sload  // [stakingToken, address]
    eq iszero                   // [condition]
    [TRANSFER_LENGTH]           // [length, condition]
    [TRANSFER_ERROR]            // [error, length, condition]
    swap2                       // [condition, length, error]
    REQUIRE()                   // []

    __FUNC_SIG(transfer)        // [transfer_sig]
    0x00 mstore                 // []
    caller                      // [caller]
    0x20 mstore                 // []
    0x24 calldataload           // [amount]
    0x40 mstore                 // []
    0x00 0x00 0x44 0x1c         // [argsOffset, argsSize, retOffset, retSize]
    0x00                        // [value, argsOffset, argsSize, retOffset, retSize]
    0x04 calldataload           // [address, value, argsOffset, argsSize, retOffset, retSize] 
    gas                         // [gas, address, value, argsOffset, argsSize, retOffset, retSize]
    call                        // [success]

    [TRANSFER_LENGTH]           // [length, success]
    [TRANSFER_ERROR]            // [error, length, success]
    swap2                       // [success, length, error]
    REQUIRE()

    0x24 calldataload           // [amount]
    0x04 calldataload           // [address, amount]
    __EVENT_HASH(Recovered)     // [sig, address, amount]
    dup1 0x00 mstore            // [sig, address, amount]
    0x20 0x00                   // [0, 32, sig, address, amount]
    log3                        // []

    0x01 0x00 mstore            // []
    0x20 0x00 return            // []
}

#define macro MAIN() = takes (0) returns (0) {

    0x00 calldataload 0xE0 shr

    dup1 __FUNC_SIG(rewardsDuration)            eq rewardsDurationJump              jumpi
    dup1 __FUNC_SIG(rewardsToken)               eq rewardsTokenJump                 jumpi
    dup1 __FUNC_SIG(stakingToken)               eq stakingTokenJump                 jumpi
    dup1 __FUNC_SIG(totalSupply)                eq totalSupplyJump                  jumpi
    dup1 __FUNC_SIG(balanceOf)                  eq balanceOfJump                    jumpi
    dup1 __FUNC_SIG(lastTimeRewardApplicable)   eq lastTimeRewardApplicableJump     jumpi
    dup1 __FUNC_SIG(rewardPerToken)             eq rewardPerTokenJump               jumpi
    // dup1 __FUNC_SIG(earned)                     eq earnedJump                       jumpi
    dup1 __FUNC_SIG(getRewardForDuration)       eq getRewardForDurationJump         jumpi
    // dup1 __FUNC_SIG(stake)                      eq stakeJump                        jumpi
    // dup1 __FUNC_SIG(withdraw)                   eq withdrawJump                     jumpi
    // dup1 __FUNC_SIG(getReward)                  eq getRewardJump                    jumpi
    // dup1 __FUNC_SIG(exit)                       eq exitJump                         jumpi
    dup1 __FUNC_SIG(notifyRewardAmount)         eq notifyRewardAmountJump           jumpi
    dup1 __FUNC_SIG(recoverERC20)               eq recoverERC20Jump                 jumpi
    dup1 __FUNC_SIG(setRewardsDuration)         eq setRewardsDurationJump           jumpi
    dup1 __FUNC_SIG(getRewardRate)              eq getRewardRateJump                jumpi

    TSOWNABLE_MAIN()

    rewardsDurationJump:
        REWARDS_DURATION()          // []
    rewardsTokenJump:
        REWARDS_TOKEN()             // []
    stakingTokenJump:
        STAKING_TOKEN()             // []
    totalSupplyJump:
        TOTAL_SUPPLY()
    balanceOfJump:
        BALANCE_OF()
    lastTimeRewardApplicableJump:
        LAST_TIME_REWARD_APPLICABLE()
    rewardPerTokenJump:
        REWARD_PER_TOKEN()
    // earnedJump:
    //     EARNED()
    getRewardForDurationJump:
        GET_REWARD_FOR_DURATION()
    // stakeJump:
    //     STAKE()
    //     finalize jump
    // withdrawJump:
    //     WITHDRAW()
    //     finalize jump
    // getRewardJump:
    //     GET_REWARD()
    //     finalize jump
    // exitJump:
    //     EXIT()
    //     finalize jump
    notifyRewardAmountJump:
        NOTIFY_REWARD_AMOUNT()
    recoverERC20Jump:
        RECOVER_ERC20()
    setRewardsDurationJump:
        SET_REWARDS_DURATION()
    getRewardRateJump:
        GET_REWARD_RATE()
    // finalize:
    //     UNLOCK()
    //     0x01 0x00 mstore
    //     0x20 0x00 return
}