/// @title Staking
/// @notice SPDX-License-Identifier: MIT
/// @author takez0_o <https://github.com/takez0o>
/// @author 
/// @notice Modern and gas efficient implementation of StakingRewards algorithm
/// @notice Adapted from Synthetix (https://github.com/Synthetixio/synthetix/blob/develop/contracts/StakingRewards.sol)
/// @notice Inspired by HuffMate (https://github.com/pentagonxyz/huffmate)

// Imports
#include "../utils/Errors.huff"
#include "../auth/NonPayable.huff"
#include "../data-structures/Hashmap.huff"

// Events
#define event RewardAdded(uint256)
#define event Staked(address indexed, uint256)
#define event Withdrawn(address indexed, uint256)
#define event RewardPaid(address indexed, uint256)
#define event RewardsDurationUpdated(uint256)
#define event Recovered(address, uint256)

// Interface
#define function totalSupply() view returns(uint256)
#define function balanceOf(address) view returns (uint256)
#define function lastTimeRewardApplicable() view returns (uint256)
#define function rewardPerToken() view returns (uint256)
#define function earned(address) view returns (uint256)
#define function getRewardForDuration() view returns (uint256)
#define function stake(uint256) nonpayable returns () 
#define function withdraw(uint256) nonpayable returns () 
#define function getReward() nonpayable returns ()
#define function exit() nonpayable returns () 
#define function notifyRewardAmount(uint256) nonpayable returns ()
#define function recoverERC20(address,uint256) nonpayable returns ()
#define function setRewardsDuration(uint256) nonpayable returns ()

// Storage
#define constant REWARDS_TOKEN_SLOT = FREE_STORAGE_POINTER()
#define constant STAKING_TOKEN_SLOT = FREE_STORAGE_POINTER()
#define constant PERIOD_FINISH_SLOT = FREE_STORAGE_POINTER()
#define constant REWARD_RATE_SLOT = FREE_STORAGE_POINTER()
#define constant REWARDS_DURATION_SLOT = FREE_STORAGE_POINTER()
#define constant LAST_UPDATE_TIME_SLOT = FREE_STORAGE_POINTER()
#define constant REWARD_PER_TOKEN_STORED_SLOT = FREE_STORAGE_POINTER()
#define constant USER_REWARD_PER_TOKEN_PAID_SLOT = FREE_STORAGE_POINTER()
#define constant REWARDS_SLOT = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_SLOT = FREE_STORAGE_POINTER()
#define constant BALANCES_SLOT = FREE_STORAGE_POINTER()

// Utility Constants
#define constant UINT_256_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
#define constant ERROR_SIG = 0x08c379a000000000000000000000000000000000000000000000000000000000
#define constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000

/// @notice Constructor
/// @notice Sets the initial addresses
#define macro STAKING_CONSTRUCTOR() = takes (0) returns (0) {
}

/// >>>>>>>>>>>>>>>>>>>>>  VIEW FUNCTIONS  <<<<<<<<<<<<<<<<<<<<<< ///

/// @notice Total Supply
/// @notice Returns the total token supply of the contract
#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    NON_PAYABLE()                       // []
    [TOTAL_SUPPLY_SLOT] sload           // [supply]
    0x00 mstore                         // []
    0x20 0x00 return                    // []
}

/// @notice Balance Of
/// @notice Returns the balance of the given address
#define macro BALANCE_OF() = takes (0) returns (0) {
    NON_PAYABLE()                                       // []
    0x04 calldataload                                   // [account]
    [BALANCES_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)     // [balance]
    0x00 mstore                                         // []
    0x20 0x00 return                                    // []
}

// Function Dispatching
#define macro STAKING_MAIN() = takes (1) returns (1) {
    // Identify which function is being called.
    // [func sig]

    dup1 __FUNC_SIG(totalSupply)                eq totalSupplyJump                  jumpi
    dup1 __FUNC_SIG(balanceOf)                  eq balanceOfJump                    jumpi
    dup1 __FUNC_SIG(lastTimeRewardApplicable)   eq lastTimeRewardApplicableJump     jumpi
    dup1 __FUNC_SIG(rewardPerToken)             eq rewardPerTokenJump               jumpi
    dup1 __FUNC_SIG(earned)                     eq earnedJump                       jumpi
    dup1 __FUNC_SIG(getRewardForDuration)       eq getRewardForDurationJump         jumpi
    dup1 __FUNC_SIG(stake)                      eq stakeJump                        jumpi
    dup1 __FUNC_SIG(withdraw)                   eq withdrawJump                     jumpi
    dup1 __FUNC_SIG(getReward)                  eq getRewardJump                    jumpi
    dup1 __FUNC_SIG(exit)                       eq exitJump                         jumpi
    dup1 __FUNC_SIG(notifyRewardAmount)         eq notifyRewardAmountJump           jumpi
    dup1 __FUNC_SIG(recoverERC20)               eq recoverERC20Jump                 jumpi
    dup1 __FUNC_SIG(setRewardsDuration)         eq setRewardsDurationJump           jumpi

    // Bubble up to the parent macro
    no_match jumpi

    totalSupplyJump:
        TOTAL_SUPPLY()
    balanceOfJump:
        BALANCE_OF()
    lastTimeRewardApplicableJump:
        LAST_TIME_REWARD_APPLICABLE()
    rewardPerTokenJump:
        REWARD_PER_TOKEN()
    earnedJump:
        EARNED()
    getRewardForDurationJump:
        GET_REWARD_FOR_DURATION()
    stakeJump:
        STAKE()
    withdrawJump:
        WITHDRAW()
    getRewardJump:
        GET_REWARD()
    exitJump:
        EXIT()
    notifyRewardAmountJump:
        NOTIFY_REWARD_AMOUNT()
    recoverERC20Jump:
        RECOVER_ERC20()
    setRewardsDurationJump:
        SET_REWARDS_DURATION()

    no_match:
}