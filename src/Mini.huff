#include "huffmate/auth/NonPayable.huff"
#include "huffmate/data-structures/Hashmap.huff"

#define function rewardsToken() view returns(address)
#define function stakingToken() view returns(address)

// Storage
#define constant REWARDS_TOKEN_SLOT = FREE_STORAGE_POINTER()
#define constant STAKING_TOKEN_SLOT = FREE_STORAGE_POINTER()
#define constant PERIOD_FINISH_SLOT = FREE_STORAGE_POINTER()
#define constant REWARD_RATE_SLOT = FREE_STORAGE_POINTER()
#define constant REWARDS_DURATION_SLOT = FREE_STORAGE_POINTER()
#define constant LAST_UPDATE_TIME_SLOT = FREE_STORAGE_POINTER()
#define constant REWARD_PER_TOKEN_STORED_SLOT = FREE_STORAGE_POINTER()
#define constant USER_REWARD_PER_TOKEN_PAID_SLOT = FREE_STORAGE_POINTER()
#define constant REWARDS_SLOT = FREE_STORAGE_POINTER()
#define constant TOTAL_SUPPLY_SLOT = FREE_STORAGE_POINTER()
#define constant BALANCES_SLOT = FREE_STORAGE_POINTER()

// Utility Constants
#define constant UINT_256_MAX = 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff
#define constant DECIMAL = 0xDE0B6B3A7640000
#define constant ZERO_ADDRESS = 0x0000000000000000000000000000000000000000

// Errors
#define constant AMOUNT_ZERO_ERROR = 0x5A45524F20414D4F554E54000000000000000000000000000000000000000000
#define constant AMOUNT_ZERO_LENGTH = 0x16
#define constant TRANSFER_ERROR = 0x5452414E53464552204641494C45440000000000000000000000000000000000
#define constant TRANSFER_LENGTH = 0x1e
#define constant GET_REWARD_ERROR = 0x4E4F205245574152445300000000000000000000000000000000000000000000
#define constant GET_REWARD_LENGTH = 0x14
#define constant WRONG_ADDRESS_ERROR = 0x57524F4E47204144445245535300000000000000000000000000000000000000
#define constant WRONG_ADDRESS_LENGTH = 0x1a
#define constant SET_REWARD_ERROR = 0x4E4F2042414C414E434500000000000000000000000000000000000000000000
#define constant SET_REWARD_LENGTH = 0x1a
#define constant STAKING_TOKEN_ERROR = 0x57524F4E4720544F4B454E000000000000000000000000000000000000000000
#define constant STAKING_TOKEN_LENGTH = 0x16

/// @notice Constructor
/// @notice Sets the initial addresses
#define macro CONSTRUCTOR() = takes (0) returns (0) {
    0x40                                    // [size] - byte size to copy
    0x40 codesize sub                       // [offset, size] - offset in the code to copy from
    0x00                                    // [mem, offset, size] - offset in memory to copy to
    codecopy                                // []

    0x00 mload                              // [rewardsToken]
    [REWARDS_TOKEN_SLOT] sstore             // []
    0x20 mload                              // [stakingToken]
    [STAKING_TOKEN_SLOT] sstore             // []
}

#define macro REWARDS_TOKEN() = takes (0) returns (1) {
    NON_PAYABLE()
    [REWARDS_TOKEN_SLOT] sload      // [rewardsToken]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

#define macro STAKING_TOKEN() = takes (0) returns (1) {
    NON_PAYABLE()
    [STAKING_TOKEN_SLOT] sload      // [stakingToken]
    0x00 mstore                     // []
    0x20 0x00 return                // []
}

/// @notice Total Supply
/// @notice Returns the total token supply of the contract
#define macro TOTAL_SUPPLY() = takes (0) returns (0) {
    NON_PAYABLE()                       // []
    [TOTAL_SUPPLY_SLOT]                 // [supply]
    0x00 mstore                         // []
    0x20 0x00 return                    // []
}

/// @notice Balance Of
/// @notice Returns the balance of the given address
#define macro BALANCE_OF() = takes (0) returns (0) {
    NON_PAYABLE()                                       // []
    0x04 calldataload                                   // [account]
    [BALANCES_SLOT] LOAD_ELEMENT_FROM_KEYS(0x00)        // [balance]
    0x00 mstore                                         // []
    0x20 0x00 return                                    // []
}

#define macro MAIN() = takes (0) returns (0) {
    0x00 calldataload 0xE0 shr

    dup1 __FUNC_SIG(rewardsToken)              eq rewardsJump                  jumpi
    dup1 __FUNC_SIG(stakingToken)              eq stakingJump                  jumpi
    dup1 __FUNC_SIG(totalSupply)               eq totalSupplyJump              jumpi
    dup1 __FUNC_SIG(balanceOf)                 eq balanceOfJump                jumpi

    rewardsJump:
        REWARDS_TOKEN()
    stakingJump:
        STAKING_TOKEN()
    totalSupplyJump:
        TOTAL_SUPPLY()
    balanceOfJump:
        BALANCE_OF()
}